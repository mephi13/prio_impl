# This file defines a list of tasks to be provisioned.

-
  # The DAP task ID is provided in base64url-encoded form, much like in request
  # paths. IDs are 32 bytes long, and they should be randomly generated, per
  # DAP's recommendation.
  task_id: "G9YKXjoEjfoU7M_fi_o2H0wmzavRb2sBFHeykeRhDMk"

  # HTTPS endpoints of the leader and helper aggregators, in a list.
  aggregator_endpoints:
  - "http://172.0.0.3/"
  - "http://172.0.0.2/"

  # The DAP query type. See below for an example of a fixed-size task
  query_type: TimeInterval

  # The task's VDAF. Each VDAF requires its own set of parameters.
  vdaf: !Prio3Sum
    bits: 8

  # The DAP role of this Janus instance in this task. Either "Leader" or
  # "Helper".
  role: Helper

  # The VDAF verify key, in base64url-encoded form. The key's length is
  # determined by the task's VDAF.
  vdaf_verify_keys:
  - "1CmuYNtBLYIoXN8bU0T_XA"

  # The maximum number of times any report can be collected.
  max_batch_query_count: 1

  # The task's expiration time, as a number of seconds after the Unix epoch.
  task_expiration: 1704088800

  # Time in seconds after which reports expire and may be garbage collected.
  # This is a Janus-specific parameter. Garbage collection for a task may
  # be disabled by setting this to `null`.
  report_expiry_age: 7776000

  # Minimum number of reports that a batch must contain before the batch may be
  # collected.
  min_batch_size: 10

  # The DAP task's time precision. This determines how clients round report
  # timestamps, and sets the minimum duration of any batch interval for time
  # interval queries.
  time_precision: 1800

  # This determines the maximum allowable clock skew between clients and the
  # aggregator, in seconds. If a report is received that has a timestamp further
  # in the future than this amount, it will be rejected. This is a
  # Janus-specific parameter.
  tolerable_clock_skew: 60000

  # The collector's HPKE configuration. The public key is encoded in base64url.
  collector_hpke_config:
    id: 1
    kem_id: X25519HkdfSha256
    kdf_id: HkdfSha256
    aead_id: Aes128Gcm
    public_key: A66xCrjccsiPTIxp8N3PPgx-EnayEBwj4hTyAQyQTDY

  # Authentication tokens shared beteween the aggregators, and used to
  # authenticate leader-to-helper requests. In the case of a leader-role task,
  # the leader will include the first token in a header when making requests to
  # the helper. In the case of a helper-role task, the helper will accept
  # requests with any of the listed authentication tokens.
  #
  # Each token's `type` governs how it is inserted into HTTP requests if used by
  # the leader to authenticate a request to the helper.
  aggregator_auth_tokens:
    # DAP-Auth-Token values are encoded in unpadded base64url, and the decoded
    # value is sent in an HTTP header. For example, this token's value decodes
    # to "aggregator-235242f99406c4fd28b820c32eab0f68".
  - type: "DapAuth"
    token: "YWdncmVnYXRvci0yMzUyNDJmOTk0MDZjNGZkMjhiODIwYzMyZWFiMGY2OA"
    # Bearer token values are encoded in base64 with padding.
  - type: "Bearer"
    token: "YWdncmVnYXRvci04NDc1NjkwZjJmYzQzMDBmYjE0NmJiMjk1NDIzNDk1NA=="

  collector_auth_tokens: []

  # This aggregator's HPKE keypairs. The first keypair's HPKE configuration will
  # be served via the `hpke_config` DAP endpoint. All keypairs will be tried
  # when decrypting report shares. Both the public key and private key fields
  # are encoded in base64url.
  hpke_keys:
  - config:
      id: 2
      kem_id: X25519HkdfSha256
      kdf_id: HkdfSha256
      aead_id: Aes128Gcm
      public_key: triCqKhOhg0F351Kv43FaPzZ0PLHDvv5IvvNNvVYSAw
    private_key: UJbSAcLH0WDhYO5BUQZWeyOAaxfaC7NyZ7H10A5NGEQ